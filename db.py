from tkinter import*
import sqlite3
import tkinter.ttk as ttk
import tkinter.messagebox as tkMessageBox

root = Tk()
root.title("Mukti Database")
screen_width = root.winfo_screenwidth()
screen_height = root.winfo_screenheight()
width = 900
height = 500
#x = (screen_width/2) - (width/2)
#y = (screen_height/2) - (height/2)
#root.geometry('%dx%d+%d+%d' % (width, height, x, y))
#root.resizable(0, 0)
root.wm_state('zoomed')

#==================================VARIABLES==========================================
CENTRE = StringVar()
NAME = StringVar()
AGE= StringVar()
GENDER = StringVar()
ADDRESS = StringVar()
ROLLNo = StringVar()
GUARDIANSNAME= StringVar()
GUARDIANSOCC = StringVar()
FNAME= StringVar()
MNAME = StringVar()
SIBLINGS = StringVar()
EDCUCATIONBACKGROUND = StringVar()
NOTES= StringVar()
SEARCH=StringVar()
temp=StringVar()

#==================================METHODS============================================
def Database():
    global conn, cursor
    conn = sqlite3.connect('DatabaseFile(DONOTDELETE).db')
    cursor = conn.cursor()
    cursor.execute("CREATE TABLE IF NOT EXISTS `member` (mem_id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, Centre TEXT, Name TEXT, Age TEXT,Gender TEXT, Address TEXT,RollNo TEXT,GuardiansName TEXT, GuardiansOcc TEXT,FName TEXT,MName TEXT,Siblings TEXT,Edcbck TEXT,Notes TEXT)")

def Create():
    if  NAME.get() == "" or CENTRE.get() == "":
        txt_result.config(text="Please complete the Name and Centre fields!", fg="red")
    else:
        Database()
        cursor.execute("INSERT INTO `member` (Centre, Name,Age,Gender, Address,RollNo,GuardiansName,GuardiansOcc,FName,MName,Siblings,Edcbck,Notes) VALUES(?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?)", (str(CENTRE.get()), str(NAME.get()),str(AGE.get()) ,str(GENDER.get()), str(ADDRESS.get()), str(ROLLNo.get()), str(GUARDIANSNAME.get()),str(GUARDIANSOCC.get()),str(FNAME.get()),str(MNAME.get()),str(SIBLINGS.get()),str(EDCUCATIONBACKGROUND.get()),str(NOTES.get())))
        tree.delete(*tree.get_children())
        cursor.execute("SELECT * FROM `member` ORDER BY `Centre` ASC")
        fetch = cursor.fetchall()
        for data in fetch:
            tree.insert('', 'end', values=(data[0], data[1], data[2], data[3], data[4], data[5], data[6],data[7],data[8],data[9],data[10],data[11],data[12],data[13]))
        conn.commit()
        CENTRE.set("")
        NAME.set("")
        AGE.set("")
        GENDER.set("")
        ADDRESS.set("")
        GUARDIANSNAME.set("")
        GUARDIANSOCC.set("")
        FNAME.set("")
        MNAME.set("")
        SIBLINGS.set("")
        EDCUCATIONBACKGROUND.set("")
        NOTES.set("")
        cursor.close()
        conn.close()
        txt_result.config(text="Created a data!", fg="green")

def Read():
    tree.delete(*tree.get_children())
    Database()
    cursor.execute("SELECT * FROM `member` ORDER BY `Centre` ASC")
    fetch = cursor.fetchall()
    for data in fetch:
        tree.insert('', 'end', values=(data[0], data[1], data[2], data[3], data[4], data[5], data[6],data[7],data[8],data[9],data[10],data[11],data[12],data[13]))
    cursor.close()
    conn.close()
    txt_result.config(text="Successfully read the data from database", fg="black")

def Update():
    Database()
    if GENDER.get() == "":
        txt_result.config(text="Please select a gender", fg="red")
    else:
        tree.delete(*tree.get_children())
        cursor.execute("UPDATE `member` SET `Centre` = ?, 'Name' = ?,'Age'=? ,`Gender` =?,  `Address` = ?,  `RollNo` = ?, `GuardiansName` = ?,'GuardiansOcc'=?,'FName'=?,'MName'=?,'Siblings'=?,'Edcbck'=?,'Notes'=? WHERE `mem_id` = ?", (str(CENTRE.get()), str(NAME.get()),str(AGE.get()),str(GENDER.get()), str(ADDRESS.get()), str(ROLLNo.get()), str(GUARDIANSNAME.get()),str(GUARDIANSOCC.get()),str(FNAME.get()),str(MNAME.get()),str(SIBLINGS.get()),str(EDCUCATIONBACKGROUND.get()),str(NOTES.get()) ,int(mem_id)))
        conn.commit()
        cursor.execute("SELECT * FROM `member` ORDER BY `Centre` ASC")
        fetch = cursor.fetchall()
        for data in fetch:
            tree.insert('', 'end', values=(data[0], data[1], data[2], data[3], data[4], data[5], data[6],data[7],data[8],data[9],data[10],data[11],data[12],data[13]))
        cursor.close()
        conn.close()
        CENTRE.set("")
        NAME.set("")
        AGE.set("")
        GENDER.set("")
        ADDRESS.set("")
        GUARDIANSNAME.set("")
        GUARDIANSOCC.set("")
        FNAME.set("")
        MNAME.set("")
        SIBLINGS.set("")
        EDCUCATIONBACKGROUND.set("")
        NOTES.set("")
        btn_create.config(state=NORMAL)
        btn_read.config(state=NORMAL)
        btn_update.config(state=DISABLED)
        btn_delete.config(state=NORMAL)
        txt_result.config(text="Successfully updated the data", fg="black")

def searchdb():
    tree.delete(*tree.get_children())
    Database()
    if(temp.get()=="Centre"):
      cursor.execute("SELECT * FROM 'member' WHERE Centre LIKE '%s' ORDER BY '' ASC" %SEARCH.get())
    elif(temp.get()=="Name"):
      cursor.execute("SELECT * FROM 'member' WHERE Name LIKE '%s' ORDER BY '' ASC" %SEARCH.get())
    else:
      cursor.execute("SELECT * FROM 'member' WHERE Gender LIKE '%s' ORDER BY '' ASC" %SEARCH.get())
    fetch=cursor.fetchall()
    for data in fetch:
        tree.insert('', 'end', values=(data[0], data[1], data[2], data[3], data[4], data[5], data[6],data[7],data[8],data[9],data[10],data[11],data[12],data[13]))
    cursor.close()
    conn.close()
    txt_result.config(text="Successfully searched for the data",fg="black")


def OnSelected(event):
    global mem_id;
    curItem = tree.focus()
    contents =(tree.item(curItem))
    selecteditem = contents['values']
    mem_id = selecteditem[0]
    CENTRE.set("")
    NAME.set("")
    AGE.set("")
    GENDER.set("")
    ADDRESS.set("")
    GUARDIANSNAME.set("")
    GUARDIANSOCC.set("")
    FNAME.set("")
    MNAME.set("")
    SIBLINGS.set("")
    EDCUCATIONBACKGROUND.set("")
    NOTES.set("")
    CENTRE.set(selecteditem[1])
    NAME.set(selecteditem[2])
    AGE.set(selecteditem[3])
    ADDRESS.set(selecteditem[5])
    ROLLNo.set(selecteditem[6])
    GUARDIANSNAME.set(selecteditem[7])
    GUARDIANSOCC.set(selecteditem[8])
    FNAME.set(selecteditem[9])
    MNAME.set(selecteditem[10])
    SIBLINGS.set(selecteditem[11])
    EDCUCATIONBACKGROUND.set(selecteditem[12])
    NOTES.set(selecteditem[13])
    btn_create.config(state=DISABLED)
    btn_read.config(state=DISABLED)
    btn_update.config(state=NORMAL)
    btn_delete.config(state=DISABLED)

def Delete():
    if not tree.selection():
       txt_result.config(text="Please select an item first", fg="red")
    else:
        result = tkMessageBox.askquestion('Mukti', 'Are you sure you want to delete this record?', icon="warning")
        if result == 'yes':
            curItem = tree.focus()
            contents =(tree.item(curItem))
            selecteditem = contents['values']
            tree.delete(curItem)
            Database()
            cursor.execute("DELETE FROM `member` WHERE `mem_id` = %d" % selecteditem[0])
            conn.commit()
            cursor.close()
            conn.close()
            txt_result.config(text="Successfully deleted the data", fg="black")


def Exit():
    result = tkMessageBox.askquestion('Python: Simple CRUD Applition', 'Are you sure you want to exit?', icon="warning")
    if result == 'yes':
        root.destroy()
        exit()



#================================FRAME=========================
title=Frame(root,height=60,width=1300,bd=8,relief="raise")
title.pack(side=TOP)
left=Frame(root,width=400,height=1240,bd=1,relief="raise")
left.pack(side=LEFT)
right=Frame(root,width=900,height=1232)
right.pack(side=LEFT)
searchframe=Frame(left,bd=8,width=392,height=150,relief="raise")
searchframe.pack(side=TOP)
form=Frame(left,height=400,width=392,bd=8)
form.pack(side=TOP)
buttonf=Frame(left,bd=8,relief="raise",width=100,height=250)
buttonf.pack(side=BOTTOM)
RadioGroup = Frame(form)
Male = Radiobutton(RadioGroup, text="Male", variable=GENDER, value="Male", font=('arial', 16)).pack(side=LEFT)
Female = Radiobutton(RadioGroup, text="Female", variable=GENDER, value="Female", font=('arial', 16)).pack(side=LEFT)
Other = Radiobutton(RadioGroup,text="Other",variable=GENDER,value="Other",font=('arial',16)).pack(side=LEFT)


#==================================LABEL WIDGET=======================================
temp.set("Centre")
searchoptions=OptionMenu(searchframe,temp,"Centre","Name","Gender")
searchoptions.pack(side=LEFT)
txt_Search=Label(searchframe,text="Search by",font=('arial',12))
txt_Search.pack(side=TOP)
txt_title = Label(title, width=900, font=('arial', 24), text = "Mukti Database")
txt_title.pack()
txt_Centre = Label(form, text="Centre:", font=('arial', 12), bd=8)
txt_Centre.grid(row=0, sticky="e")
txt_Name = Label(form, text="Name:", font=('arial', 12), bd=8)
txt_Name.grid(row=1, sticky="e")
txt_Age=Label(form, text="Name:", font=('arial', 12), bd=8)
txt_Age.grid(row=2,sticky='e')
txt_Gender = Label(form, text="Gender:", font=('arial', 12), bd=8)
txt_Gender.grid(row=3, sticky="e")
txt_Address = Label(form, text="Address:", font=('arial', 12), bd=8)
txt_Address.grid(row=4, sticky="e")
txt_RollNo = Label(form, text="Roll No:", font=('arial', 12), bd=8)
txt_RollNo.grid(row=5, sticky="e")
txt_GName = Label(form, text="Guardians Name:", font=('arial', 12), bd=8)
txt_GName.grid(row=6, sticky="e")
txt_GOcc=Label(form,text="Guardians Occupation:",font=('arial',12),bd=8)
txt_GOcc.grid(row=7,sticky='e')
txt_FName=Label(form,text="Fathers Name:",font=('arial',12),bd=8)
txt_FName.grid(row=8,sticky='e')
txt_MName=Label(form,text="Mothers Name:",font=('arial',12),bd=8)
txt_MName.grid(row=9,sticky='e')
txt_Siblings=Label(form,text="Siblings:",font=('arial',12),bd=8)
txt_Siblings.grid(row=10,sticky='e')
txt_Edcbck=Label(form,text="Education Background",font=('arial',12),bd=8)
txt_Edcbck.grid(row=11,sticky='e')
txt_Notes=Label(form,text="Notes:",font=('arial',12),bd=8)
txt_Notes.grid(row=12,sticky='e')
txt_result = Label(buttonf)
txt_result.pack(side=TOP)
#==================================ENTRY WIDGET=======================================
Searchtext=Entry(searchframe,textvariable=SEARCH,width=40)
Searchtext.pack(side=TOP)
Centre = Entry(form, textvariable=CENTRE, width=40)
Centre.grid(row=0, column=1)
Name = Entry(form, textvariable=NAME, width=40)
Name.grid(row=1, column=1)
Age = Entry(form,textvariable=AGE,width=40)
Age.grid(row=2,column=1)
RadioGroup.grid(row=3, column=1)
Address = Entry(form, textvariable=ADDRESS, width=40)
Address.grid(row=4, column=1)
RollNo = Entry(form, textvariable=ROLLNo, width=40)
RollNo.grid(row=5, column=1)
GuardiansName = Entry(form, textvariable=GUARDIANSNAME, width=40)
GuardiansName.grid(row=6, column=1)
GuardiansOcc = Entry(form, textvariable=GUARDIANSOCC, width=40)
GuardiansOcc.grid(row=7, column=1)
FName = Entry(form, textvariable=FNAME, width=40)
FName.grid(row=8, column=1)
MName= Entry(form, textvariable=MNAME, width=40)
MName.grid(row=9, column=1)
Siblings= Entry(form, textvariable=SIBLINGS, width=40)
Siblings.grid(row=10, column=1)
Edcbck = Entry(form, textvariable=EDCUCATIONBACKGROUND, width=40)
Edcbck.grid(row=11, column=1)
Notes = Entry(form, textvariable=NOTES, width=40)
Notes.grid(row=12, column=1)

#==================================BUTTONS WIDGET=====================================
btn_create = Button(buttonf, width=10, text="Create", command=Create)
btn_create.pack(side=LEFT)
btn_read = Button(buttonf, width=10, text="Read", command=Read )
btn_read.pack(side=LEFT)
btn_update = Button(buttonf, width=10, text="Update", command=Update, state=DISABLED)
btn_update.pack(side=LEFT)
btn_delete = Button(buttonf, width=10, text="Delete", command=Delete)
btn_delete.pack(side=LEFT)
btn_exit = Button(buttonf, width=10, text="Exit", command=Exit)
btn_exit.pack(side=LEFT)
btn_search = Button(searchframe,width=10,text="Search",command=searchdb)
btn_search.pack(side=BOTTOM)


#==================================LIST WIDGET========================================
scrollbary = Scrollbar(right, orient=VERTICAL)
scrollbarx = Scrollbar(right, orient=HORIZONTAL)
tree = ttk.Treeview(right, columns=("MemberID", "Centre", "Name","Age" ,"Gender", "Address", "RollNo", "GuardiansName","GuardiansOcc","FName","MName","Siblings","Edcbck","Notes"), selectmode="extended", height=500, yscrollcommand=scrollbary.set, xscrollcommand=scrollbarx.set)
scrollbary.config(command=tree.yview)
scrollbary.pack(side=RIGHT, fill=Y)
scrollbarx.config(command=tree.xview)
scrollbarx.pack(side=BOTTOM, fill=X)
tree.heading('MemberID', text="MemberID", anchor=W)
tree.heading('Centre', text="Centre", anchor=W)
tree.heading('Name', text="Name", anchor=W)
tree.heading('Age',text="Age",anchor=W)
tree.heading('Gender', text="Gender", anchor=W)
tree.heading('Address', text="Address", anchor=W)
tree.heading('RollNo', text="Roll No", anchor=W)
tree.heading('GuardiansName', text="Guardians Name", anchor=W)
tree.heading('GuardiansOcc',text="Guardians Occupation",anchor=W)
tree.heading('FName',text="Fathers Name",anchor=W)
tree.heading('MName',text="Mothers Name",anchor=W)
tree.heading('Siblings',text="Siblings",anchor=W)
tree.heading('Edcbck',text="Education Background",anchor=W)
tree.heading('Notes',text="Notes",anchor=W)
tree.column('#0', stretch=NO, minwidth=0, width=0)
tree.column('#1', stretch=NO, minwidth=0, width=0)
tree.column('#2', stretch=NO, minwidth=0, width=90)
tree.column('#3', stretch=NO, minwidth=0, width=100)
tree.column('#4',stretch=NO,minwidth=0,width=50)
tree.column('#4', stretch=NO, minwidth=0, width=60)
tree.column('#5', stretch=NO, minwidth=0, width=50)
tree.column('#6', stretch=NO, minwidth=0, width=150)
tree.column('#7', stretch=NO, minwidth=0, width=80)
tree.column('#8', stretch=NO, minwidth=0, width=180)
tree.column('#9', stretch=NO, minwidth=0, width=160)
tree.column('#10', stretch=NO, minwidth=0, width=150)
tree.column('#11', stretch=NO, minwidth=0, width=180)
tree.column('#12', stretch=NO, minwidth=0, width=180)
tree.column('#13', stretch=NO, minwidth=0, width=180)
tree.pack()
tree.bind('<Double-Button-1>', OnSelected)
#==================================INITIALIZATION=====================================
if __name__ == '__main__':
    root.mainloop()
